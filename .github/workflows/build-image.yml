name: Build, Create Custom Image, and Manage Instance Group Update

on:
  pull_request_target:
    types: [closed]
    branches:
      - main

jobs:
  build-artifact-image-and-update:
    runs-on: ubuntu-latest
    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.CREDENTIAL_GCP }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Install MySQL Server
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql.service
  
      - name: Configure MySQL
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_USER_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DB_NAME: ${{ secrets.DB_NAME }} 
        run: |
          sudo mysql -e "CREATE USER ${MYSQL_USER}@'localhost' IDENTIFIED BY '${MYSQL_USER_PASSWORD}';" -p"${MYSQL_ROOT_PASSWORD}"
          sudo mysql -e "CREATE DATABASE ${MYSQL_DB_NAME};" -p"${MYSQL_ROOT_PASSWORD}"
          sudo mysql -e "GRANT ALL PRIVILEGES ON ${MYSQL_DB_NAME}.* TO '${MYSQL_USER}'@'localhost';" -p"${MYSQL_ROOT_PASSWORD}"
          sudo mysql -e "FLUSH PRIVILEGES;" -p"${MYSQL_ROOT_PASSWORD}"
      - name: Check MySQL Service Status
        run: |
          sudo systemctl status mysql.service
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.17.0
    
      # Write package.json content to a file
      - name: Write package.json
        run: npm init -y
        
      - name: Install packages
        run: npm install express sequelize dotenv mysql2 bcrypt basic-auth ci axios node-json-logger @google-cloud/logging @google-cloud/pubsub

      - name: Write GCP Credentials File
        env:
          CREDENTIALS_GCP: ${{ secrets.CREDENTIAL_GCP }}
        run: |
          echo "$CREDENTIALS_GCP" > credentials.json
          echo "$LOCAL_MACHINE_SSH_KEY" > danakwoh_local.pub
      
      - name: Run the app
        run: nohup node app.js &
        env:
          PORT: ${{ secrets.PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }} 
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}

      # Run integration tests
      - name: Run integration test 1
        run: node tests/test1.js

      # Run integration tests
      - name: Run integration test 2
        run: node tests/test2.js

      - name: Stop the app
        run: |
          # Find the process ID of the Node.js application
          PID=$(sudo lsof -t -i:${{secrets.MYSQL_PORT}}) 
          
          # Check if the process ID exists
          if [ -n "$PID" ]; then
            echo "Stopping Node.js application with PID $PID"
            
            # Terminate the Node.js application
            sudo kill -9 $PID
          else
            echo "No Node.js application found running on port your_port_number"
          fi
      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: 'latest'
      
      - name: Build Application Artifact
        run:  zip -r app_artifact.zip .
        working-directory: ${{ github.workspace }}
          
      - name: Run Packer to build custom image
        run: |
          cd ${{ github.workspace }}
          ls -a
          packer init .
          packer build -var-file="var.pkrvars.hcl" custom_image.pkr.hcl



          
      # Retrieve the image ID from the output file generated by Packer
      - name: Read Image ID from file
        id: read_image_id
        run: echo "::set-output name=image_id::$(cat image_id.txt)"


      - name: Create new Instance Template version
        run: |
          gcloud compute instance-templates create new-web-server \
            --source-instance-template web-server \
            --image ${{ steps.read_image_id.outputs.image_id }} 
          
      - name: Configure managed instance group
        run: |
          gcloud compute instance-groups managed set-instance-template webapp-manager \
            --template new-web-server 
          
      
      - name: Start rolling update
        run: |
          gcloud compute instance-groups managed rolling-action start-update webapp-manager \
            --version template=new-web-server 
         
            
      - name: Monitor instance group refresh
        run: |
          # Replace PLACEHOLDERS with actual values
          while true; do
            # Check the status of the instance group refresh
            status=$(gcloud compute instance-groups managed describe webapp-manager  --format='value(currentActions.replacing.versionInstaneTemplate.version)' 2>/dev/null)
            
            # If the refresh is still in progress, sleep for some time and check again
            if [ "$status" = "new-webapp-server" ]; then
              echo "Waiting for instance group refresh to complete..."
              sleep 10
            else
              echo "Instance group refresh completed successfully."
              break
            fi
          done
